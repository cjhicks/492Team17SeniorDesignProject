%clear;function [realeval, evals, means, percentiles, ncomps]=rawpar(raw, kind, randtype, ndatsets, percent);tic;% Parallel Analysis Program For Raw Data and Data Permutations.%  This program conducts parallel analyses on data files in which%  the rows of the data matrix are cases/individuals and the%  columns are variables; There can be no missing values;%  You must also specify:%   -- the # of parallel data sets for the analyses;%   -- the desired percentile of the distribution and random%      data eigenvalues;%   -- whether principal components analyses or principal axis/common%      factor analysis are to be conducted, and%   -- whether normally distributed random data generation or %      permutations of the raw data set are to be used in the%      parallel analyses;%  WARNING: Permutations of the raw data set are time consuming;%  Each parallel data set is based on column-wise random shufflings%  of the values in the raw data matrix using Castellan's (1992, %  BRMIC, 24, 72-77) algorithm; The distributions of the original %  raw variables are exactly preserved in the shuffled versions used%  in the parallel analyses; Permutations of the raw data set are%  thus highly accurate and most relevant, especially in cases where%  the raw data are not normally distributed or when they do not meet%  the assumption of multivariate normality (see Longman & Holden,%  1992, BRMIC, 24, 493, for a Fortran version); If you would%  like to go this route, it is perhaps best to (1) first run a %  normally distributed random data generation parallel analysis to%  familiarize yourself with the program and to get a ballpark%  reference point for the number of factors/components;%  (2) then run a permutations of the raw data parallel analysis%  using a small number of datasets (e.g., 10), just to see how long%  the program takes to run; then (3) run a permutations of the raw%  data parallel analysis using the number of parallel data sets that%  you would like use for your final analyses; 100 datasets are %  usually sufficient, although more datasets should be used%  if there are close calls.% The "load" command can be used to read a raw data file% The raw data matrix must be named "raw"%  These next commands generate artificial raw data %  (50 cases) that can be used for a trial-run of%  the program, instead of using your own raw data; %  Just run this whole file; However, make sure to%  delete these commands before attempting to run your own data.% Start of artificial data commands.% com = randn(500,3);% raw = randn(500,9);% raw(:,1:3) = raw(:,1:3) + [ com(:,1) com(:,1) com(:,1) ];% raw(:,4:6) = raw(:,4:6) + [ com(:,2) com(:,2) com(:,2) ];% raw(:,7:9) = raw(:,7:9) + [ com(:,3) com(:,3) com(:,3) ];% End of artificial data commands.%r = corrcoef(var); nfactors = 3;pca;lding%ndatsets  = 5  ; % Enter the desired number of parallel data sets here%percent   = 95  ; % Enter the desired percentile here% Specify the desired kind of parellel analysis, where:% 1 = principal components analysis% 2 = principal axis / common factor analysis%kind = 1 ;% Enter either%  1 for normally distributed random data generation parallel analysis, or%  2 for permutations of the raw data set (VERY time consuming).%randtype = 2 ;%the next command can be used to set the state of the random # generatorrandn('state',1953125)% End of required user specifications.[ncases,nvars] = size(raw);% principal components analysis & random normal data generationif (kind == 1 & randtype == 1)realeval = flipud(sort(eig(corrcoef(raw))));%used to be corrcoef(raw)for nds = 1:ndatsets; evals(:,nds) = eig(corrcoef(randn(ncases,nvars)));endend% principal components analysis & raw data permutationif (kind == 1 & randtype == 2)    wBar = waitbar(0,'Please wait, Performing Parallel Analysis...');count = 0;realeval = flipud(sort(eig(corrcoef(raw))));%used to be corrcoef(raw)for nds = 1:ndatsets; ndsx = raw;for lupec = 1:nvars;for luper = 1:(ncases -1);k = fix( (ncases - luper + 1) * rand(1) + 1 )  + luper - 1;d = x(luper,lupec);x(luper,lupec) = x(k,lupec);x(k,lupec) = d;endendevals(:,nds) = eig(corrcoef(x));count = count + 1;waitbar(count/ndatsets);endclose(wBar);end% PAF/common factor analysis & random normal data generationif (kind == 2 & randtype == 1)r = corrcoef(raw);smc = 1 - (1 ./ diag(inv(r)));for ii=1:size(r,1);r(ii,ii) = smc(ii,1);end;realeval = flipud(sort(eig(r)));for nds = 1:ndatsets; r = corrcoef(randn(ncases,nvars));smc = 1 - (1 ./ diag(inv(r)));for ii=1:size(r,1);r(ii,ii) = smc(ii,1);end;evals(:,nds) = eig(r);end;end% PAF/common factor analysis & raw data permutationif (kind == 2 & randtype == 2)r = corrcoef(raw);smc = 1 - (1 ./ diag(inv(r)));for ii=1:size(r,1);r(ii,ii) = smc(ii,1);end;realeval = flipud(sort(eig(r)));for nds = 1:ndatsets; x = raw;for lupec = 1:nvars;for luper = 1:(ncases -1);k = fix( (ncases - luper + 1) * rand(1) + 1 )  + luper - 1;d = x(luper,lupec);x(luper,lupec) = x(k,lupec);x(k,lupec) = d;end;end;r = corrcoef(x);smc = 1 - (1 ./ diag(inv(r)));for ii=1:size(r,1);r(ii,ii) = smc(ii,1);end;evals(:,nds) = eig(r);end;endevals = flipud(sort(evals,1));means = (mean(evals,2));   % mean eigenvalues for each position.evals = sort(evals,2);     % sorting the eigenvalues for each position.percentiles = (evals(:,round((percent*ndatsets)/100)));  % percentiles.format shortdisp([' ']);disp(['PARALLEL ANALYSIS ']); disp([' '])if (kind == 1 & randtype == 1);disp(['Principal Components Analysis & Random Normal Data Generation' ]);disp([' ']);endif (kind == 1 & randtype == 2);disp(['Principal Components Analysis & Raw Data Permutation' ]);disp([' ']);endif (kind == 2 & randtype == 1);disp(['PAF/Common Factor Analysis & Random Normal Data Generation' ]);disp([' ']);endif (kind == 2 & randtype == 2);disp(['PAF/Common Factor Analysis & Raw Data Permutation' ]);disp([' ']);enddisp(['Variables  = ' num2str(nvars) ]);disp(['Cases      = ' num2str(ncases) ]);disp(['Datsets    = ' num2str(ndatsets) ]);disp(['Percentile = ' num2str(percent) ]);disp([' '])disp(['Raw Data Eigenvalues, & Mean & Percentile Random Data Eigenvalues']);disp([' '])disp(['      Root   Raw Data    Means   Percentiles' ])disp([(1:nvars).'  realeval means  percentiles]);disp([' '])disp(['time for this problem = ', num2str(toc) ]); disp([' '])% figure% plot(realeval, 'r');% hold on% plot(means, 'b');% plot(percentiles, 'k');% title('Results of the Parallel Test') for i=1:length(realeval)     if realeval(i)-means(i)<=0         ncomps=i-1;         break     end end% temp=['xlabel(''Suggest retaining ', int2str(ncomps),' component(s)'');'];% eval(temp); 