function [STPCAresults]=STPCA(pcadata,Nsubs,Nconds,doTemporal)
%Script to run spatiotemporal PCA
%Author: Paul Kieffaber
%Date:   2-26-04
%NOTE:   SPCA and TPCA call varimax.m (written by Scott Makeig and
         %available through the EEGLab package) and doPromax.m (written by Joseph
         %Dien and available in Dien's PCA package)
%------------------------------------------------------------------------
%       MAKE SURE...
%           1) data is named "pcadata"
%           2) data structure is points([sub1condition1; sub1condition2 etc.]) X channels
%------------------------------------------------------------------------
%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%    USER DEFINED VARIABLES
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% ms_start=0;%time (in ms) your data epoch starts
% ms_stop=1000;%time your data epoch stops
% srate=250;%sampling rate
% analyze_start=0;%time (in ms) you want analysis to start
% analyze_stop=1000;%time you want analysis window to stop
pointspertrial=length(pcadata.time)%250;%# of points per epoch
numsubjects=Nsubs;%103;%self explanatory
numconditions=Nconds;%6;%also self explanatory
nchans=size(pcadata.data,2)%129;%you guessed it!
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% temp=reshape(pcadata.data',129,262,23*4);
% pcadata.data=[];
% for i=1:size(temp,3)
%     [smoothdata,filtwts] = ERPLAB_butterfilt(temp(:,:,i),250,.5,30,3);
%     [smoothdata,datamean] = ERPLAB_rmbase(smoothdata,min(find(pcadata.time<=0)):max(find(pcadata.time<=0)));
%     pcadata.data=cat(1,pcadata.data,smoothdata(:,find(pcadata.time>=0 & pcadata.time<=900))');
% end
% clear temp
% 
% 
% time=pcadata.time(find(pcadata.time>=0 & pcadata.time<=900)); %ms_start:(1000/srate):ms_stop;
%THE FOLLOWING SECTION JUST CREATES A BOOLEAN VECTOR WITH ONES IN EACH TIME-POINT YOU WANT TRIMMED.
%THE TRIMMING FOLLOWS FROM THE "analyze_start" and "analyze_stop" variables.
% analysis_vec=ones(length(time),1);
% for i=1:length(time)
%     if time(i)>=analyze_start & time(i)<=analyze_stop
%         analysis_vec(i)=0;
%     end
% end
% datatocut=[];
% for i=1:(size(pcadata,1)/pointspertrial)
%     datatocut=[datatocut; analysis_vec];
% end
% %trim data and time vector
% pcadata(boolean(datatocut),:)=[];
% time(boolean(analysis_vec))=[];

STPCAresults=struct;
STPCAresults.time=pcadata.time;
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%Step 1:  Determine the number of components to retain based on Parallel Analysis
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%raw:       data matrix (points X chans)
%kind:      1=PCA, 2=Principal Factor Analysis
%randtype:  1=normally distributed random data, 2=shuffling of raw data
%ndatasets: number of data sets to generate
%percent:   Percentile rank of eigenvalues generated by comparisons
[realeval, evals, means, percentiles]=rawpar(pcadata.data, 1, 2, 100, 90);
%figure
%plot(realeval, 'r');
%hold on
%plot(means, 'b');
%plot(percentiles, 'k');
%title('Results of the SPCA Parallel Test')
%figure out the number of components to retain 
for i=1:length(realeval)
    if realeval(i)-means(i)<=0
        spca_ncomps=i-1;
        break
    end
end
clear realeval evals means percentiles
%spca_ncomps=1;
%temp=['xlabel(''Retaining ', int2str(spca_ncomps),' spatial components'');'];
%eval(temp);
 
 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
 %Step 2:  Run the Spatial PCA
 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%5
 spca_ncomps=size(pcadata.data,2);%3;
[STPCAresults.Spatial.scree,STPCAresults.Spatial.scores,STPCAresults.Spatial.loadings,STPCAresults.Spatial.VmxPat,STPCAresults.Spatial.VmxScr,STPCAresults.Spatial.varacc,STPCAresults.Spatial.PmxPat,STPCAresults.Spatial.PmxScr,STPCAresults.Spatial.pmaxvaracc,STPCAresults.Spatial.pmax_coeffs]=SPCA(pcadata.data,spca_ncomps);
%STPCAresults.Spatial.scree=scree;
% STPCAresults.Spatial.scores=scores;
% STPCAresults.Spatial.loadings=loadings;
% STPCAresults.Spatial.VmxPat=VmxPat;
% STPCAresults.Spatial.varacc=varacc;
% STPCAresults.Spatial.Pmxpat=PmxPat;
% STPCAresults.Spatial.PmxScr=PmxScr;
% STPCAresults.Spatial.pmaxvaracc=pmaxvaracc;
% STPCAresults.Spatial.pmax_coeffs=pmax_coeffs;
%Compute grand-mean scores for each component
PmxScr_mean=STPCAresults.Spatial.PmxScr';
PmxScr_mean=reshape(PmxScr_mean,spca_ncomps,length(pcadata.time),size(STPCAresults.Spatial.PmxScr,1)/length(pcadata.time));
PmxScr_mean=mean(PmxScr_mean,3);
STPCAresults.Spatial.PmxScr_mean=PmxScr_mean;
%clear PmxScr

if doTemporal
    %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
    %Step 3:  Run the Temporal PCA
    %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
    %Re-structure data for temporal PCA
    datafortpca=[];
    for i=1:length(pcadata.time):size(STPCAresults.Spatial.PmxScr,1)
        datafortpca=[datafortpca;STPCAresults.Spatial.PmxScr(i:(i+length(pcadata.time))-1,1:2)'];
    end
    spca_ncomps=2;
    %Run Parallel Test for tpcadata
    [realeval, evals, means, percentiles]=rawpar(datafortpca, 1, 2, 50, 90);
    %figure
    %plot(realeval, 'r');
    %hold on
    %plot(means, 'b');
    %plot(percentiles, 'k');
    %title('Results of the TPCA Parallel Test')
    for i=1:length(realeval)
        if realeval(i)-means(i)<=0
            tpca_ncomps=i-1;
            break
        end
    end
    clear realeval evals means percentiles
    %temp=['xlabel(''Retaining ', int2str(tpca_ncomps),' components'');'];
    %eval(temp);
    %tpca_ncomps=3;
    %Run TPCA
    [STPCAresults.Temporal.VmxPat, STPCAresults.Temporal.scree, STPCAresults.Temporal.varacc, STPCAresults.Temporal.PmxScr, STPCAresults.Temporal.cumvaracc,STPCAresults.Temporal.PmxPat,STPCAresults.Temporal.pmaxvaracc]=TPCA(datafortpca,tpca_ncomps);
    % STPCAresults.Temporal.VmxPat=tVmxPat;
    % STPCAresults.Temporal.scree=tscree;
    % STPCAresults.Temporal.PmxScr=tPmxScr;
    % STPCAresults.Temporal.cumvaracc=tcumvaracc;
    % STPCAresults.Temporal.PmxPat=tPmxPat;
    % STPCAresults.Temporal.Pmxvaracc=tpmaxvaracc;
    %Create spss data
    %data are structured with one subject per row and columns as [Condition 1 - S1T1-N S2T1-N...SNT1-N Condition 2 - S1T1-N S2T1-N...SNT1-N]
    sub=1;
    spssdata=[];
    for q=1:spca_ncomps*numconditions:size(datafortpca,1)
        temp=[];
        for j=1:spca_ncomps*numconditions
            temp=[temp STPCAresults.Temporal.PmxScr(q+j-1,:)];
        end
        spssdata(sub,:)=temp;
        sub=sub+1;
    end
    STPCAresults.SPSS=spssdata;
end

